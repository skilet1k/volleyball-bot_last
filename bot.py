async def init_db():
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        # Ensure posts table exists
        await conn.execute('''CREATE TABLE IF NOT EXISTS posts (
            id SERIAL PRIMARY KEY,
            text TEXT,
            created_at TIMESTAMP
        )''')
        # Ensure extra_info column exists in games table
        await conn.execute('''CREATE TABLE IF NOT EXISTS games (
            id SERIAL PRIMARY KEY,
            date TEXT,
            time_start TEXT,
            time_end TEXT,
            place TEXT,
            price INTEGER
        )''')
        # Add extra_info column if missing (safe check)
        col_check = await conn.fetchval("SELECT column_name FROM information_schema.columns WHERE table_name='games' AND column_name='extra_info'")
        if not col_check:
            try:
                await conn.execute('ALTER TABLE games ADD COLUMN extra_info TEXT')
            except Exception:
                pass  # Ignore if column already exists
        
        # Create registrations table with BIGINT for user_id
        await conn.execute('''CREATE TABLE IF NOT EXISTS registrations (
            id SERIAL PRIMARY KEY,
            game_id INTEGER,
            user_id BIGINT,
            username TEXT,
            full_name TEXT,
            paid INTEGER DEFAULT 0
        )''')
        
        # Create users table with BIGINT for user_id
        await conn.execute('''CREATE TABLE IF NOT EXISTS users (
            user_id BIGINT PRIMARY KEY,
            lang TEXT
        )''')
        
        # Check if we need to alter existing tables to use BIGINT
        try:
            # Check registrations table
            reg_user_id_type = await conn.fetchval("""
                SELECT data_type FROM information_schema.columns 
                WHERE table_name='registrations' AND column_name='user_id'
            """)
            if reg_user_id_type == 'integer':
                await conn.execute('ALTER TABLE registrations ALTER COLUMN user_id TYPE BIGINT')
                
            # Check users table  
            users_user_id_type = await conn.fetchval("""
                SELECT data_type FROM information_schema.columns 
                WHERE table_name='users' AND column_name='user_id'
            """)
            if users_user_id_type == 'integer':
                await conn.execute('ALTER TABLE users ALTER COLUMN user_id TYPE BIGINT')
        except Exception as e:
            print(f"Note: Could not alter existing tables: {e}")
            # This is okay - tables might not exist yet or already be correct type
def reply_menu(is_admin=False, lang='ru'):
    buttons = [
        [KeyboardButton(text={'ru':'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ','uk':'üìÖ –†–æ–∑–∫–ª–∞–¥','en':'üìÖ Schedule'}[lang])],
        [KeyboardButton(text={'ru':'üéü –ú–æ–∏ –∑–∞–ø–∏—Å–∏','uk':'üéü –ú–æ—ó –∑–∞–ø–∏—Å–∏','en':'üéü My records'}[lang])],
        [KeyboardButton(text={'ru':'‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã','uk':'‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏','en':'‚öôÔ∏è Parameters'}[lang])]
    ]
    if is_admin:
        buttons.append([KeyboardButton(text={'ru':'‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É','uk':'‚ûï –î–æ–¥–∞—Ç–∏ –≥—Ä—É','en':'‚ûï Add game'}[lang])])
        buttons.append([KeyboardButton(text={'ru':'‚ùå –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É','uk':'‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä—É','en':'‚ùå Delete game'}[lang])])
        buttons.append([KeyboardButton(text={'ru':'üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏','uk':'üë• –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–ø–∏—Å–∏','en':'üë• View registrations'}[lang])])
        buttons.append([KeyboardButton(text={'ru':'üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç','uk':'üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å—Ç','en':'üìù Create post'}[lang])])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message, ReplyKeyboardMarkup, KeyboardButton
import asyncpg
import datetime

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN') or '7552454167:AAGJCiF2yiQ-oMokKORBHosgdAHzgLei74U'

ADMIN_IDS = [760746564, 683243528, 1202044081]
# Railway –∏—Å–ø–æ–ª—å–∑—É–µ—Ç DATABASE_URL, Render –∏—Å–ø–æ–ª—å–∑—É–µ—Ç POSTGRES_DSN
DB_DSN = os.getenv('DATABASE_URL') or os.getenv('POSTGRES_DSN') or 'postgresql://postgres:postgres@localhost:5432/volleyball'

bot = Bot(token=TOKEN)
dp = Dispatcher()
user_states = {}
add_game_states = {}

@dp.callback_query(F.data == 'main_schedule')
async def main_schedule_btn(callback: CallbackQuery):
    await show_schedule(callback.message)
    await callback.answer()
# PostgreSQL pool helper
_pg_pool = None
async def get_pg_pool():
    global _pg_pool
    if _pg_pool is None:
        _pg_pool = await asyncpg.create_pool(dsn=DB_DSN)
    return _pg_pool

LANGUAGES = {
    'ru': '–†—É—Å—Å–∫–∏–π',
    'uk': '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
    'en': 'English'
}
    # --- Add game step handler is defined below ---

# --- Delete game menu ---
@dp.message(F.text.in_(['‚ùå –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É','‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä—É','‚ùå Delete game']))
async def delete_game_menu(message: Message):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –¥—Ä—É–≥–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é
    clear_add_game_state(message.from_user.id)
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –¥—Ä—É–≥–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é
    clear_post_creation_state(message.from_user.id)
    
    lang = get_lang(message.from_user.id)
    if message.from_user.id not in ADMIN_IDS:
        await message.answer(TEXTS['no_access'][lang])
        return
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        games = await conn.fetch('SELECT id, date, time_start, time_end, place FROM games')
        if not games:
            await message.answer(TEXTS['delete_game_empty'][lang])
            return
        kb_rows = []
        for game in games:
            game_id, date, time_start, time_end, place = game['id'], game['date'], game['time_start'], game['time_end'], game['place']
            kb_rows.append([InlineKeyboardButton(text=f"{date} {time_start}-{time_end} {place}", callback_data=f'delgame_{game_id}')])
        kb = InlineKeyboardMarkup(inline_keyboard=kb_rows)
        await message.answer(TEXTS['delete_game_choose'][lang], reply_markup=kb)

# --- Create post menu ---
@dp.message(F.text.in_(['üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç','üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å—Ç','üìù Create post']))
async def create_post_menu(message: Message):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –¥—Ä—É–≥–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é
    clear_add_game_state(message.from_user.id)
    
    lang = get_lang(message.from_user.id)
    if message.from_user.id not in ADMIN_IDS:
        await message.answer(TEXTS['no_access'][lang])
        return
    user_id = message.from_user.id
    # Preserve language in state if already set
    lang_state = user_states.get(user_id, {}).get('lang', lang)
    user_states[user_id] = {'step': 'create_post', 'lang': lang_state}
    await message.answer({'ru':'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:','uk':'–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:','en':'Enter post text:'}[lang])

# --- Create post step handler ---
# ...existing code...

TEXTS = {
    'welcome': {
        'ru': "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        'uk': "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
        'en': "Welcome! Choose your language:"
    },
    'welcome_description': {
        'ru': "üèê –ò–≥—Ä–∞–µ–º –≤–æ–ª–µ–π–±–æ–ª –≤ –í–∞—Ä—à–∞–≤–µ ‚Äî –∑–∞–ª, –º—è—á–∏, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∑–∞ 25‚Äì29 PLN.\nüìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 12:00.\nüìù –ó–∞–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –∏–≥—Ä—ã –ø—Ä—è–º–æ —Ç—É—Ç!",
        'uk': "üèê –ì—Ä–∞—î–º–æ —É –≤–æ–ª–µ–π–±–æ–ª —É –í–∞—Ä—à–∞–≤—ñ ‚Äî –∑–∞–ª, –º'—è—á—ñ, –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞ 25‚Äì29 PLN.\nüìÖ –†–æ–∑–∫–ª–∞–¥ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è —â–æ–ø–æ–Ω–µ–¥—ñ–ª–∫–∞ –æ 12:00.\nüìù –ó–∞–ø–∏—Å—É–π—Å—è –Ω–∞ —ñ–≥—Ä–∏ –ø—Ä—è–º–æ —Ç—É—Ç!",
        'en': "üèê Playing volleyball in Warsaw ‚Äî hall, balls, organization for 25‚Äì29 PLN.\nüìÖ Schedule is updated every Monday at 12:00.\nüìù Sign up for games right here!"
    },
    'choose_action': {
        'ru': "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        'uk': "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        'en': "Choose an action:"
    },
    'schedule_empty': {
        'ru': "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ.",
        'uk': "–†–æ–∑–∫–ª–∞–¥ –ø–æ—Ä–æ–∂–Ω—ñ–π.",
        'en': "Schedule is empty."
    },
    'my_records_empty': {
        'ru': "–í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.",
        'uk': "–í–∏ —â–µ –Ω—ñ–∫–æ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏.",
        'en': "You haven't registered anyone yet."
    },
    'enter_name': {
        'ru': "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –¥–ª—è –∑–∞–ø–∏—Å–∏:",
        'uk': "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –¥–ª—è –∑–∞–ø–∏—Å—É:",
        'en': "Enter name and surname for registration:"
    },
    'enter_username': {
        'ru': "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫ –≤ Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä, @nickname):",
        'uk': "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω—ñ–∫ –≤ Telegram (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, @nickname):",
        'en': "Enter your Telegram username (e.g., @nickname):"
    },
    'registered': {
        'ru': "–ó–∞–ø–∏—Å–∞–Ω–æ!",
        'uk': "–ó–∞–ø–∏—Å–∞–Ω–æ!",
        'en': "Registered!"
    },
    'no_access': {
        'ru': "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.",
        'uk': "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.",
        'en': "No access."
    },
    'add_game_date': {
        'ru': "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏–≥—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 21.07.2025):",
        'uk': "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –≥—Ä–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 21.07.2025):",
        'en': "Enter game date (e.g., 21.07.2025):"
    },
    'add_game_time_start': {
        'ru': "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:00):",
        'uk': "–í–≤–µ–¥—ñ—Ç—å —á–∞—Å –ø–æ—á–∞—Ç–∫—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 18:00):",
        'en': "Enter start time (e.g., 18:00):"
    },
    'add_game_time_end': {
        'ru': "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20:00):",
        'uk': "–í–≤–µ–¥—ñ—Ç—å —á–∞—Å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 20:00):",
        'en': "Enter end time (e.g., 20:00):"
    },
    'add_game_place': {
        'ru': "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ:",
        'uk': "–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ü–µ:",
        'en': "Enter place:"
    },
    'add_game_price': {
        'ru': "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (PLN):",
        'uk': "–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É (PLN):",
        'en': "Enter price (PLN):"
    },
    'add_game_added': {
        'ru': "–ò–≥—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
        'uk': "–ì—Ä—É –¥–æ–¥–∞–Ω–æ!",
        'en': "Game added!"
    },
    'add_game_price_error': {
        'ru': "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!",
        'uk': "–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ!",
        'en': "Enter a number!"
    },
    'delete_game_empty': {
        'ru': "–ù–µ—Ç –∏–≥—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
        'uk': "–ù–µ–º–∞—î —ñ–≥–æ—Ä –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.",
        'en': "No games to delete."
    },
    'delete_game_choose': {
        'ru': "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        'uk': "–í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:",
        'en': "Choose a game to delete:"
    },
    'delete_game_done': {
        'ru': "–ò–≥—Ä–∞ —É–¥–∞–ª–µ–Ω–∞.",
        'uk': "–ì—Ä—É –≤–∏–¥–∞–ª–µ–Ω–æ.",
        'en': "Game deleted."
    },
    'unknown_command': {
        'ru': "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        'uk': "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        'en': "Unknown command. Please choose an action:"
    },
    'record_deleted': {
        'ru': "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        'uk': "–ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
        'en': "Registration cancelled."
    },
    'record_not_found': {
        'ru': "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
        'uk': "–ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
        'en': "Registration not found."
    },
    'paid_status_changed': {
        'ru': "–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∏–∑–º–µ–Ω—ë–Ω –Ω–∞",
        'uk': "–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞",
        'en': "Payment status changed to"
    }
}

def get_lang(user_id):
    return user_states.get(user_id, {}).get('lang', 'ru')

async def ensure_user_lang(user_id):
    """–£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω –≤ user_states"""
    if user_id not in user_states or 'lang' not in user_states[user_id]:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        pool = await get_pg_pool()
        async with pool.acquire() as conn:
            user_data = await conn.fetchrow('SELECT lang FROM users WHERE user_id = $1', user_id)
            if user_data:
                lang = user_data['lang'] if user_data['lang'] else 'ru'
            else:
                # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ
                lang = 'ru'
                await conn.execute('INSERT INTO users (user_id, lang) VALUES ($1, $2) ON CONFLICT (user_id) DO NOTHING', user_id, lang)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º user_states
            if user_id not in user_states:
                user_states[user_id] = {}
            user_states[user_id]['lang'] = lang
    
    return user_states[user_id]['lang']

@dp.message(F.text.in_([
    '‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã', '‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏', '‚öôÔ∏è Parameters'
]))
async def parameters_menu(message: Message):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –¥—Ä—É–≥–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é
    clear_add_game_state(message.from_user.id)
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –¥—Ä—É–≥–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é
    clear_post_creation_state(message.from_user.id)
    
    user_id = message.from_user.id
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω
    lang = await ensure_user_lang(user_id)
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=LANGUAGES['ru'], callback_data='lang_ru')],
        [InlineKeyboardButton(text=LANGUAGES['uk'], callback_data='lang_uk')],
        [InlineKeyboardButton(text=LANGUAGES['en'], callback_data='lang_en')],
        [InlineKeyboardButton(text={
            'ru': '–ù–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã',
            'uk': '–ù–∞—à—ñ —Ä–µ—Å—É—Ä—Å–∏',
            'en': 'Our resources'
        }[lang], url='https://linktr.ee/volleyball_warsaw')],
        [InlineKeyboardButton(text={
            'ru': '–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É',
            'uk': '–ù–∞–ø–∏—Å–∞—Ç–∏ –∞–¥–º—ñ–Ω—É',
            'en': 'Contact admin'
        }[lang], url='https://t.me/hannazoria')],
        [InlineKeyboardButton(text={
            'ru': '–ß–∞—Ç –ø–æ –≤–æ–ª–µ–π–±–æ–ª—É',
            'uk': '–ß–∞—Ç –∑ –≤–æ–ª–µ–π–±–æ–ª—É',
            'en': 'Volleyball chat'
        }[lang], url='https://t.me/volleyball_warsaw')]
    ])
    await message.answer({'ru':'–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–ª–∏ —Ä–µ—Å—É—Ä—Å:','uk':'–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –∞–±–æ —Ä–µ—Å—É—Ä—Å:','en':'Choose language or resource:'}[lang], reply_markup=kb)

@dp.callback_query(F.data.startswith('lang_'))
async def set_language(callback: CallbackQuery):
    lang = callback.data.split('_')[1]
    user_states[callback.from_user.id] = {'lang': lang}
    is_admin = callback.from_user.id in ADMIN_IDS
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        await conn.execute('INSERT INTO users (user_id, lang) VALUES ($1, $2) ON CONFLICT (user_id) DO NOTHING', callback.from_user.id, lang)
    await callback.message.answer({'ru':'–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω.','uk':'–ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ.','en':'Language changed.'}[lang], reply_markup=reply_menu(is_admin, lang))
    await callback.answer()

@dp.callback_query(F.data.startswith('lang_') & F.data.endswith('_first'))
async def set_language_first_time(callback: CallbackQuery):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    lang = callback.data.split('_')[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —è–∑—ã–∫ –∏–∑ callback_data —Ç–∏–ø–∞ 'lang_ru_first'
    user_id = callback.from_user.id
    is_admin = user_id in ADMIN_IDS
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = {'lang': lang}
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        await conn.execute('INSERT INTO users (user_id, lang) VALUES ($1, $2)', user_id, lang)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞
    welcome_description = TEXTS['welcome_description'][lang]
    await callback.message.edit_text(welcome_description, reply_markup=reply_menu(is_admin, lang))
    await callback.answer()

def clear_add_game_state(user_id):
    """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    add_game_states.pop(user_id, None)

def clear_post_creation_state(user_id):
    """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in user_states:
        user_states[user_id].pop('step', None)
        user_states[user_id].pop('post_text', None)

@dp.message(F.text.in_([
    'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üìÖ –†–æ–∑–∫–ª–∞–¥', 'üìÖ Schedule'
]))
async def show_schedule(message: Message):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –¥—Ä—É–≥–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é
    clear_add_game_state(message.from_user.id)
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –¥—Ä—É–≥–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é
    clear_post_creation_state(message.from_user.id)
    
    user_id = message.from_user.id
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω
    lang = await ensure_user_lang(user_id)

    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        games = await conn.fetch('SELECT id, date, time_start, time_end, place, price, extra_info FROM games')
        if not games:
            await message.answer(TEXTS['schedule_empty'][lang])
            return

        for game in games:
            game_id, date, time_start, time_end, place, price, extra_info = game['id'], game['date'], game['time_start'], game['time_end'], game['place'], game['price'], game.get('extra_info', '')
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ —Å–∫—Ä—ã–≤–∞–µ–º –≥–æ–¥
            try:
                day, month, year = map(int, date.split('.'))
                dt = datetime.date(year, month, day)
                weekday = dt.strftime('%A')
                weekday_short_ru = {
                    'Monday': '–ø–Ω', 'Tuesday': '–≤—Ç', 'Wednesday': '—Å—Ä', 'Thursday': '—á—Ç', 'Friday': '–ø—Ç', 'Saturday': '—Å–±', 'Sunday': '–≤—Å'
                }
                weekday_short_uk = {
                    'Monday': '–ø–Ω', 'Tuesday': '–≤—Ç', 'Wednesday': '—Å—Ä', 'Thursday': '—á—Ç', 'Friday': '–ø—Ç', 'Saturday': '—Å–±', 'Sunday': '–Ω–¥'
                }
                weekday_short_en = {
                    'Monday': 'Mon', 'Tuesday': 'Tue', 'Wednesday': 'Wed', 'Thursday': 'Thu', 'Friday': 'Fri', 'Saturday': 'Sat', 'Sunday': 'Sun'
                }
                weekday_short_map = {'ru': weekday_short_ru, 'uk': weekday_short_uk, 'en': weekday_short_en}
                weekday_str = weekday_short_map.get(lang, weekday_short_en).get(weekday)
                if not weekday_str:
                    weekday_str = weekday_short_en.get(weekday, weekday)
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –±–µ–∑ –≥–æ–¥–∞
                date_no_year = '.'.join(date.split('.')[:2])
            except Exception:
                weekday_str = ''
                date_no_year = date
            registrations = await conn.fetch('SELECT full_name, username, paid FROM registrations WHERE game_id = $1 ORDER BY id', game_id)
            main_list = registrations[:14]
            reserve_list = registrations[14:]
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Google Maps
            maps_url = f'https://www.google.com/maps/search/?api=1&query={place.replace(" ", "+")}'
            place_link = f'<a href="{maps_url}">{place}</a>'
            # –ï—Å–ª–∏ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–µ–ª–∞–µ–º –∏–º—è —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∞–¥—Ä–µ—Å, –∞ username ‚Äî –Ω–∞ –ª–∏—á–∫—É
            is_private = message.chat.type == 'private' if hasattr(message.chat, 'type') else getattr(message.chat, 'type', None) == 'private'
            def name_link(name, username):
                if username:
                    return f'<a href="https://t.me/{username.lstrip("@").strip()}">{name}</a>'
                return name
            reg_text = ""
            for idx, r in enumerate(main_list, 1):
                reg_text += f"{idx}. {name_link(r['full_name'], r['username'])} {'‚úÖ' if r['paid'] else ''}\n"
            if reserve_list:
                reg_text += "\n" + {'ru':'–†–µ–∑–µ—Ä–≤:','uk':'–†–µ–∑–µ—Ä–≤:','en':'Reserve:'}[lang] + "\n"
                for idx, r in enumerate(reserve_list, 1):
                    reg_text += f"R{idx}. {name_link(r['full_name'], r['username'])} {'‚úÖ' if r['paid'] else ''}\n"
            if not reg_text:
                reg_text = {'ru':'–ù–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö.','uk':'–ù–µ–º–∞—î –∑–∞–ø–∏—Å–∞–Ω–∏—Ö.','en':'No registrations.'}[lang]
            extra_info_text = f"üìù {extra_info}\n" if extra_info else ""
            text = (f"üìÖ {date_no_year} ({weekday_str})\n"
                    f"‚è∞ {time_start} - {time_end}\n"
                    f"üèüÔ∏è {place_link}\n"
                    f"üíµ {price} PLN\n"
                    f"{extra_info_text}"
                    f"{ {'ru':'–ó–∞–ø–∏—Å–∞–ª–∏—Å—å:','uk':'–ó–∞–ø–∏—Å–∞–ª–∏—Å—å:','en':'Registered:'}[lang] }\n{reg_text}")
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text={'ru':'–ó–∞–ø–∏—Å–∞—Ç—å—Å—è','uk':'–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è','en':'Register'}[lang], callback_data=f'register_{game_id}')],
            ])
            await message.answer(text, reply_markup=kb, parse_mode='HTML', disable_web_page_preview=True)
@dp.callback_query(F.data.startswith('delreg_'))
async def delreg(callback: CallbackQuery):
    lang = get_lang(callback.from_user.id)
    game_id = int(callback.data.split('_')[1])
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        await conn.execute('DELETE FROM registrations WHERE game_id = $1 AND user_id = $2', game_id, callback.from_user.id)
    await callback.message.answer({'ru':'–í–∞—à–∞ –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.','uk':'–í–∞—à—É –∑–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ.','en':'Your registration has been deleted.'}[lang], reply_markup=reply_menu(callback.from_user.id in ADMIN_IDS, lang=lang))

@dp.callback_query(F.data.startswith('register_'))
async def register(callback: CallbackQuery):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    clear_add_game_state(callback.from_user.id)
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    clear_post_creation_state(callback.from_user.id)
    
    user_id = callback.from_user.id
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω
    lang = await ensure_user_lang(user_id)
    
    game_id = int(callback.data.split('_')[1])
    user_states[user_id]['registering'] = game_id

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–µ–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¢–û–õ–¨–ö–û —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        previous = await conn.fetch('SELECT full_name, username FROM registrations WHERE user_id = $1', callback.from_user.id)

    if previous:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text={'ru':'–í—ã–±—Ä–∞—Ç—å –∏–∑ —Ä–∞–Ω–µ–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö','uk':'–í–∏–±—Ä–∞—Ç–∏ –∑ —Ä–∞–Ω—ñ—à–µ –∑–∞–ø–∏—Å–∞–Ω–∏—Ö','en':'Choose from previous'}[lang], callback_data='choose_prev')],
            [InlineKeyboardButton(text={'ru':'–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ','uk':'–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ','en':'Add new'}[lang], callback_data='add_new')]
        ])
        user_states[callback.from_user.id]['previous'] = previous
        await callback.message.answer({'ru':'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:','uk':'–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:','en':'Choose action:'}[lang], reply_markup=kb)
    else:
        user_states[callback.from_user.id]['step'] = 'name'
        await callback.message.answer(TEXTS['enter_name'][lang])

@dp.callback_query(F.data == 'choose_prev')
async def choose_prev(callback: CallbackQuery):
    user_id = callback.from_user.id
    lang = await ensure_user_lang(user_id)
    previous = user_states[user_id].get('previous', [])
    seen = set()
    unique_previous = []
    for name, username in previous:
        key = (name.strip(), (username or '').strip())
        if key not in seen:
            seen.add(key)
            unique_previous.append((name, username))
    # Helper: delete previous bot message for user
    async def delete_last_bot_message(user_id, chat):
        msg_id = user_states.get(user_id, {}).get('last_bot_msg_id')
        if msg_id:
            try:
                await bot.delete_message(chat.id, msg_id)
            except Exception:
                pass
            user_states[user_id]['last_bot_msg_id'] = None
    await delete_last_bot_message(callback.from_user.id, callback.message.chat)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f'{name}', callback_data=f'prev_{name}_{username}') for name, username in unique_previous]
    ])
    msg = await callback.message.answer({'ru':'–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞:','uk':'–í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä–∞–≤—Ü—è:','en':'Choose player:'}[lang], reply_markup=kb)
    user_states[callback.from_user.id]['last_bot_msg_id'] = msg.message_id

@dp.callback_query(F.data.startswith('prev_'))
async def prev_selected(callback: CallbackQuery):
    user_id = callback.from_user.id
    lang = await ensure_user_lang(user_id)
    parts = callback.data.split('_', 2)
    full_name = parts[1]
    username = parts[2]
    game_id = user_states[callback.from_user.id]['registering']
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        await conn.execute('INSERT INTO registrations (game_id, user_id, username, full_name, paid) VALUES ($1, $2, $3, $4, $5)',
                           game_id, callback.from_user.id, username, full_name, 0)
    await delete_last_bot_message(callback.from_user.id, callback.message.chat)
    msg = await callback.message.answer(TEXTS['registered'][lang], reply_markup=reply_menu(callback.from_user.id in ADMIN_IDS, lang=lang))
    user_states[callback.from_user.id]['last_bot_msg_id'] = msg.message_id
    user_states[callback.from_user.id].pop('registering', None)
    user_states[callback.from_user.id].pop('previous', None)

@dp.callback_query(F.data == 'add_new')
async def add_new(callback: CallbackQuery):
    user_id = callback.from_user.id
    lang = await ensure_user_lang(user_id)
    user_states[callback.from_user.id]['step'] = 'name'
    await callback.message.answer(TEXTS['enter_name'][lang])

@dp.message(F.text.in_([
    '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É', '‚ûï –î–æ–¥–∞—Ç–∏ –≥—Ä—É', '‚ûï Add game'
]))
async def add_game_menu(message: Message):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –¥—Ä—É–≥–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é
    clear_post_creation_state(message.from_user.id)
    
    lang = get_lang(message.from_user.id)
    if message.from_user.id not in ADMIN_IDS:
        await message.answer(TEXTS['no_access'][lang])
        return
    add_game_states[message.from_user.id] = {'step': 'date'}
    await message.answer(TEXTS['add_game_date'][lang], reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text={'ru':'–û—Ç–º–µ–Ω–∞','uk':'–°–∫–∞—Å—É–≤–∞—Ç–∏','en':'Cancel'}[lang], callback_data='cancel_addgame')]]))

# --- Add game step handler ---
    # ...existing code...

# --- Skip extra info callback ---
@dp.callback_query(F.data == 'skip_extra_info')
async def skip_extra_info(callback: CallbackQuery):
    user_id = callback.from_user.id
    lang = get_lang(user_id)
    state = add_game_states.get(user_id)
    if not state or state.get('step') != 'extra_info':
        await callback.answer()
        return
    state['extra_info'] = ''
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        await conn.execute('INSERT INTO games (date, time_start, time_end, place, price, extra_info) VALUES ($1, $2, $3, $4, $5, $6)',
                           state['date'], state['time_start'], state['time_end'], state['place'], state['price'], state['extra_info'])
    add_game_states.pop(user_id, None)
    await callback.message.answer(TEXTS['add_game_added'][lang], reply_markup=reply_menu(True, lang))
    await callback.answer()

@dp.callback_query(F.data == 'post_with_schedule_button')
async def post_with_schedule_button(callback: CallbackQuery):
    lang = get_lang(callback.from_user.id)
    user_id = callback.from_user.id
    state = user_states.get(user_id)
    
    if not state or state.get('step') != 'post_button_choice':
        await callback.answer()
        return
        
    post_text = state.get('post_text')
    if not post_text:
        await callback.message.answer({'ru':'–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.','uk':'–ü–æ–º–∏–ª–∫–∞: —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.','en':'Error: post text not found.'}[lang])
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    schedule_button = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text={'ru':'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ','uk':'üìÖ –†–æ–∑–∫–ª–∞–¥','en':'üìÖ Schedule'}[lang], callback_data='main_schedule')]
    ])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        await conn.execute('INSERT INTO posts (text, created_at) VALUES ($1, $2)', post_text, datetime.datetime.now())
        users = await conn.fetch('SELECT user_id FROM users')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∫–Ω–æ–ø–∫–æ–π
    sent_count = 0
    for u in users:
        try:
            await bot.send_message(u['user_id'], post_text, reply_markup=schedule_button)
            sent_count += 1
        except Exception:
            pass
    
    user_states.pop(user_id, None)
    await callback.message.answer({'ru':f'–ü–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!','uk':f'–ü–æ—Å—Ç –∑ –∫–Ω–æ–ø–∫–æ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {sent_count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º!','en':f'Post with button sent to {sent_count} users!'}[lang], reply_markup=reply_menu(True, lang))
    await callback.answer()

@dp.callback_query(F.data == 'post_without_button')
async def post_without_button(callback: CallbackQuery):
    lang = get_lang(callback.from_user.id)
    user_id = callback.from_user.id
    state = user_states.get(user_id)
    
    if not state or state.get('step') != 'post_button_choice':
        await callback.answer()
        return
        
    post_text = state.get('post_text')
    if not post_text:
        await callback.message.answer({'ru':'–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.','uk':'–ü–æ–º–∏–ª–∫–∞: —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.','en':'Error: post text not found.'}[lang])
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        await conn.execute('INSERT INTO posts (text, created_at) VALUES ($1, $2)', post_text, datetime.datetime.now())
        users = await conn.fetch('SELECT user_id FROM users')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–µ–∑ –∫–Ω–æ–ø–∫–∏
    sent_count = 0
    for u in users:
        try:
            await bot.send_message(u['user_id'], post_text)
            sent_count += 1
        except Exception:
            pass
    
    user_states.pop(user_id, None)
    await callback.message.answer({'ru':f'–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!','uk':f'–ü–æ—Å—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {sent_count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º!','en':f'Post sent to {sent_count} users!'}[lang], reply_markup=reply_menu(True, lang))
    await callback.answer()

@dp.callback_query(F.data == 'cancel_addgame')
async def cancel_addgame(callback: CallbackQuery):
    lang = get_lang(callback.from_user.id)
    add_game_states.pop(callback.from_user.id, None)
    await callback.message.answer({'ru':'–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.','uk':'–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.','en':'Game creation cancelled.'}[lang], reply_markup=reply_menu(callback.from_user.id in ADMIN_IDS, lang=lang))

@dp.message(F.text.in_([
    'üéü –ú–æ–∏ –∑–∞–ø–∏—Å–∏', 'üéü –ú–æ—ó –∑–∞–ø–∏—Å–∏', 'üéü My records'
]))
async def my_records(message: Message):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –¥—Ä—É–≥–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é
    clear_add_game_state(message.from_user.id)
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –¥—Ä—É–≥–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é
    clear_post_creation_state(message.from_user.id)
    
    user_id = message.from_user.id
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω
    lang = await ensure_user_lang(user_id)
    
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        games = await conn.fetch('''SELECT g.id, g.date, g.time_start, g.time_end, g.place, g.price FROM games g JOIN registrations r ON r.game_id = g.id WHERE r.user_id = $1 GROUP BY g.id ORDER BY g.date, g.time_start''', message.from_user.id)
        if not games:
            await message.answer(TEXTS['my_records_empty'][lang])
            return
        for game in games:
            game_id, date, time_start, time_end, place, price = game['id'], game['date'], game['time_start'], game['time_end'], game['place'], game['price']
            regs = await conn.fetch('SELECT id, full_name, paid FROM registrations WHERE game_id = $1 AND user_id = $2 ORDER BY id', game_id, message.from_user.id)
            maps_url = f'https://www.google.com/maps/search/?api=1&query={place.replace(" ", "+")}'
            place_link = f'<a href="{maps_url}">{place}</a>'
            reg_text = ''
            for idx, r in enumerate(regs, 1):
                reg_text += f"{idx}. {r['full_name']} {'‚úÖ' if r['paid'] else '‚ùå'}\n"
            text = (f"üìÖ {date} ‚è∞ {time_start}-{time_end} üèüÔ∏è {place_link} üíµ {price} PLN\n"
                    f"{reg_text}")
            if len(regs) > 1:
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text={'ru':f"–£–¥–∞–ª–∏—Ç—å: {r['full_name']}", 'uk':f"–í–∏–¥–∞–ª–∏—Ç–∏: {r['full_name']}", 'en':f"Delete: {r['full_name']}"}[lang], callback_data=f"delmyreg_{r['id']}") for r in regs]
                ])
                await message.answer(text, reply_markup=kb, parse_mode='HTML', disable_web_page_preview=True)
            elif len(regs) == 1:
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text={'ru':'–£–¥–∞–ª–∏—Ç—å –º–æ—é –∑–∞–ø–∏—Å—å','uk':'–í–∏–¥–∞–ª–∏—Ç–∏ –º—ñ–π –∑–∞–ø–∏—Å','en':'Delete my registration'}[lang], callback_data=f"delmyreg_{regs[0]['id']}")]
                ])
                await message.answer(text, reply_markup=kb, parse_mode='HTML', disable_web_page_preview=True)
            else:
                await message.answer(text, parse_mode='HTML', disable_web_page_preview=True)
@dp.callback_query(F.data.startswith('delmyreg_'))
async def delmyreg(callback: CallbackQuery):
    lang = get_lang(callback.from_user.id)
    reg_id = int(callback.data.split('_')[1])
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        await conn.execute('DELETE FROM registrations WHERE id = $1 AND user_id = $2', reg_id, callback.from_user.id)
    await callback.message.answer({'ru':'–í–∞—à–∞ –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.','uk':'–í–∞—à—É –∑–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ.','en':'Your registration has been deleted.'}[lang], reply_markup=reply_menu(callback.from_user.id in ADMIN_IDS, lang=lang))

@dp.callback_query(F.data.startswith('delgame_'))
async def delgame(callback: CallbackQuery):
    lang = get_lang(callback.from_user.id)
    if callback.from_user.id not in ADMIN_IDS:
        await callback.message.answer(TEXTS['no_access'][lang])
        return
    game_id = int(callback.data.split('_')[1])
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        await conn.execute('DELETE FROM games WHERE id = $1', game_id)
        await conn.execute('DELETE FROM registrations WHERE game_id = $1', game_id)
    await callback.message.answer(TEXTS['delete_game_done'][lang], reply_markup=reply_menu(True, lang))

@dp.message(F.text.in_([
    'üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏', 'üë• –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–ø–∏—Å–∏', 'üë• View registrations'
]))
async def view_records(message: Message):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –¥—Ä—É–≥–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é
    clear_add_game_state(message.from_user.id)
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –¥—Ä—É–≥–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é
    clear_post_creation_state(message.from_user.id)
    
    lang = get_lang(message.from_user.id)
    if message.from_user.id not in ADMIN_IDS:
        await message.answer(TEXTS['no_access'][lang])
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text={'ru':'–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ','uk':'–ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥','en':'Edit schedule'}[lang], callback_data='edit_schedule_mode'),
            InlineKeyboardButton(text={'ru':'–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞','uk':'–í–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä–∞–≤—Ü—è','en':'Delete player'}[lang], callback_data='delete_player_mode')
        ]
    ])
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        games = await conn.fetch('SELECT id, date, time_start, time_end, place FROM games')
        if not games:
            await message.answer({'ru':'–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä.','uk':'–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —ñ–≥–æ—Ä.','en':'No available games.'}[lang])
            return
        for game in games:
            game_id, date, time_start, time_end, place = game['id'], game['date'], game['time_start'], game['time_end'], game['place']
            registrations = await conn.fetch('SELECT id, full_name, paid FROM registrations WHERE game_id = $1 ORDER BY id', game_id)
            main_list = registrations[:14]
            reserve_list = registrations[14:]
            reg_text = ""
            for idx, r in enumerate(main_list, 1):
                reg_text += f"{idx}. {r['full_name']} {'‚úÖ' if r['paid'] else ''} | /togglepaid_{r['id']}\n"
            if reserve_list:
                reg_text += "\n" + {'ru':'–†–µ–∑–µ—Ä–≤:','uk':'–†–µ–∑–µ—Ä–≤:','en':'Reserve:'}[lang] + "\n"
                for idx, r in enumerate(reserve_list, 1):
                    reg_text += f"R{idx}. {r['full_name']} {'‚úÖ' if r['paid'] else ''} | /togglepaid_{r['id']}\n"
            if not reg_text:
                reg_text = {'ru':'–ù–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö.','uk':'–ù–µ–º–∞—î –∑–∞–ø–∏—Å–∞–Ω–∏—Ö.','en':'No registrations.'}[lang]
            await message.answer(f"{ {'ru':'–ò–≥—Ä–∞','uk':'–ì—Ä–∞','en':'Game'}[lang] } üìÖ {date} ‚è∞ {time_start}-{time_end} üèüÔ∏è {place}\n{reg_text}", reply_markup=kb)

@dp.callback_query(F.data == 'edit_schedule_mode')
async def edit_schedule_mode(callback: CallbackQuery):
    lang = get_lang(callback.from_user.id)
    if callback.from_user.id not in ADMIN_IDS:
        await callback.message.answer(TEXTS['no_access'][lang])
        return
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        games = await conn.fetch('SELECT id, date, time_start, time_end, place FROM games')
        if not games:
            await callback.message.answer({'ru':'–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä.','uk':'–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —ñ–≥–æ—Ä.','en':'No available games.'}[lang])
            return
        kb_rows = []
        for game in games:
            game_id, date, time_start, time_end, place = game['id'], game['date'], game['time_start'], game['time_end'], game['place']
            kb_rows.append([InlineKeyboardButton(text=f"{date} {time_start}-{time_end} {place}", callback_data=f'editgame_{game_id}')])
        kb = InlineKeyboardMarkup(inline_keyboard=kb_rows)
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', reply_markup=kb)

@dp.callback_query(F.data.startswith('editgame_'))
async def editgame(callback: CallbackQuery):
    lang = get_lang(callback.from_user.id)
    if callback.from_user.id not in ADMIN_IDS:
        await callback.message.answer(TEXTS['no_access'][lang])
        return
    game_id = int(callback.data.split('_')[1])
    if callback.from_user.id not in user_states:
        user_states[callback.from_user.id] = {'lang': lang}
    user_states[callback.from_user.id]['edit_game_id'] = game_id
    # Get current game info
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        game = await conn.fetchrow('SELECT date, time_start, time_end, place, price FROM games WHERE id = $1', game_id)
    if game:
        date, time_start, time_end, place, price = game['date'], game['time_start'], game['time_end'], game['place'], game['price']
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        schedule_block = f"{date}\n{time_start}\n{time_end}\n{place}\n{price}"
        # –î–æ–±–∞–≤–ª—è–µ–º extra_info –µ—Å–ª–∏ –µ—Å—Ç—å
        pool = await get_pg_pool()
        async with pool.acquire() as conn:
            extra_info = await conn.fetchval('SELECT extra_info FROM games WHERE id = $1', game_id)
        if extra_info:
            schedule_block += f"\n{extra_info}"
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞
        instructions = {
            'ru': "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —ç—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n–î–∞—Ç–∞\n–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞\n–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è\n–ú–µ—Å—Ç–æ\n–¶–µ–Ω–∞\n–ó–∞–º–µ—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
            'uk': "–°–∫–æ–ø—ñ—é–π—Ç–µ, –≤—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ —ñ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π —Ä–æ–∑–∫–ª–∞–¥ —É —Ü—å–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:\n–î–∞—Ç–∞\n–ß–∞—Å –ø–æ—á–∞—Ç–∫—É\n–ß–∞—Å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è\n–ú—ñ—Å—Ü–µ\n–¶—ñ–Ω–∞\n–ù–æ—Ç–∞—Ç–∫–∏ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)",
            'en': "Copy, edit, and send the new schedule in this format:\nDate\nStart time\nEnd time\nPlace\nPrice\nExtra info (optional)"
        }[lang]
        user_states[callback.from_user.id]['edit_game_mode'] = True
        await callback.message.answer(f"{instructions}\n\n<pre>{schedule_block}</pre>", parse_mode='HTML')
    else:
        await callback.message.answer({'ru':'–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.','uk':'–ì—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.','en':'Game not found.'}[lang])

@dp.message(CommandStart())
async def start_command(message: Message):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
    clear_add_game_state(message.from_user.id)
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
    clear_post_creation_state(message.from_user.id)
    
    user_id = message.from_user.id
    is_admin = user_id in ADMIN_IDS
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        existing_user = await conn.fetchrow('SELECT user_id, lang FROM users WHERE user_id = $1', user_id)
    
    if existing_user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –º–µ–Ω—é
        lang = existing_user['lang'] if existing_user['lang'] else 'ru'
        user_states[user_id] = {'lang': lang}
        
        welcome_description = TEXTS['welcome_description'][lang]
        await message.answer(welcome_description, reply_markup=reply_menu(is_admin, lang))
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
        welcome_text = TEXTS['welcome']['uk']  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=LANGUAGES['ru'], callback_data='lang_ru_first')],
            [InlineKeyboardButton(text=LANGUAGES['uk'], callback_data='lang_uk_first')],
            [InlineKeyboardButton(text=LANGUAGES['en'], callback_data='lang_en_first')]
        ])
        await message.answer(welcome_text, reply_markup=kb)

@dp.message()
async def handle_messages(message: Message):
    user_id = message.from_user.id
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω
    lang = await ensure_user_lang(user_id)

    # --- Create post step handler ---
    state = user_states.get(user_id)
    if state and state.get('step') == 'create_post':
        post_text = message.text.strip()
        if not post_text:
            await message.answer({'ru':'–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.','uk':'–¢–µ–∫—Å—Ç –ø–æ—Å—Ç—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.','en':'Post text cannot be empty.'}[lang])
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user_id]['post_text'] = post_text
        user_states[user_id]['step'] = 'post_button_choice'
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text={'ru':'üìÖ –° –∫–Ω–æ–ø–∫–æ–π "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"','uk':'üìÖ –ó –∫–Ω–æ–ø–∫–æ—é "–†–æ–∑–∫–ª–∞–¥"','en':'üìÖ With "Schedule" button'}[lang], callback_data='post_with_schedule_button')],
            [InlineKeyboardButton(text={'ru':'üìù –ë–µ–∑ –∫–Ω–æ–ø–∫–∏','uk':'üìù –ë–µ–∑ –∫–Ω–æ–ø–∫–∏','en':'üìù Without button'}[lang], callback_data='post_without_button')]
        ])
        await message.answer({'ru':'–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–¥ –ø–æ—Å—Ç–æ–º?','uk':'–î–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫—É —Ä–æ–∑–∫–ª–∞–¥—É –ø—ñ–¥ –ø–æ—Å—Ç–æ–º?','en':'Add schedule button under the post?'}[lang], reply_markup=kb)
        return

    # --- Edit game step handler ---
    if state and state.get('edit_game_mode') and user_id in ADMIN_IDS:
        game_id = state.get('edit_game_id')
        if not game_id:
            await message.answer({'ru':'–û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.','uk':'–ü–æ–º–∏–ª–∫–∞: –≥—Ä—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.','en':'Error: game for editing not found.'}[lang])
            return
        
        lines = message.text.strip().split('\n')
        if len(lines) < 5:
            await message.answer({'ru':'–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ:\n–î–∞—Ç–∞\n–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞\n–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è\n–ú–µ—Å—Ç–æ\n–¶–µ–Ω–∞\n–ó–∞–º–µ—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)','uk':'–ü–æ–º–∏–ª–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ—Ç—Ä—ñ–±–Ω–æ:\n–î–∞—Ç–∞\n–ß–∞—Å –ø–æ—á–∞—Ç–∫—É\n–ß–∞—Å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è\n–ú—ñ—Å—Ü–µ\n–¶—ñ–Ω–∞\n–ù–æ—Ç–∞—Ç–∫–∏ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)','en':'Error: wrong format. Need:\nDate\nStart time\nEnd time\nPlace\nPrice\nExtra info (optional)'}[lang])
            return
        
        try:
            date = lines[0].strip()
            time_start = lines[1].strip()
            time_end = lines[2].strip()
            place = lines[3].strip()
            price = int(lines[4].strip())
            extra_info = lines[5].strip() if len(lines) > 5 else ''
            
            pool = await get_pg_pool()
            async with pool.acquire() as conn:
                await conn.execute(
                    'UPDATE games SET date = $1, time_start = $2, time_end = $3, place = $4, price = $5, extra_info = $6 WHERE id = $7',
                    date, time_start, time_end, place, price, extra_info, game_id
                )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            user_states[user_id].pop('edit_game_mode', None)
            user_states[user_id].pop('edit_game_id', None)
            
            await message.answer({'ru':'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!','uk':'–†–æ–∑–∫–ª–∞–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ!','en':'Schedule updated!'}[lang], reply_markup=reply_menu(True, lang))
            return
            
        except ValueError:
            await message.answer({'ru':'–û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.','uk':'–ü–æ–º–∏–ª–∫–∞: —Ü—ñ–Ω–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.','en':'Error: price must be a number.'}[lang])
            return
        except Exception as e:
            await message.answer({'ru':'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.','uk':'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ä–æ–∑–∫–ª–∞–¥—É.','en':'Error updating schedule.'}[lang])
            return

    # --- Toggle paid status for registration ---
    if message.text and message.text.startswith('/togglepaid_') and user_id in ADMIN_IDS:
        try:
            reg_id = int(message.text.split('_')[1])
        except Exception:
            await message.answer({'ru':'–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.','uk':'–ü–æ–º–∏–ª–∫–∞: –Ω–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏.','en':'Error: invalid command format.'}[lang])
            return
        pool = await get_pg_pool()
        async with pool.acquire() as conn:
            reg = await conn.fetchrow('SELECT paid FROM registrations WHERE id = $1', reg_id)
            if not reg:
                await message.answer({'ru':'–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.','uk':'–ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.','en':'Registration not found.'}[lang])
                return
            new_paid = 0 if reg['paid'] else 1
            await conn.execute('UPDATE registrations SET paid = $1 WHERE id = $2', new_paid, reg_id)
        await message.answer(f"{TEXTS['paid_status_changed'][lang]} {'‚úÖ' if new_paid else '‚ùå'}", reply_markup=reply_menu(True, lang))
        return

    # --- Add game step handler ---
    add_state = add_game_states.get(user_id)
    if add_state:
        step = add_state.get('step')
        text = message.text.strip()
        if step == 'date':
            add_state['date'] = text
            add_state['step'] = 'time_start'
            await message.answer(TEXTS['add_game_time_start'][lang])
            return
        elif step == 'time_start':
            add_state['time_start'] = text
            add_state['step'] = 'time_end'
            await message.answer(TEXTS['add_game_time_end'][lang])
            return
        elif step == 'time_end':
            add_state['time_end'] = text
            add_state['step'] = 'place'
            await message.answer(TEXTS['add_game_place'][lang])
            return
        elif step == 'place':
            add_state['place'] = text
            add_state['step'] = 'price'
            await message.answer(TEXTS['add_game_price'][lang])
            return
        elif step == 'price':
            try:
                price = int(text)
            except Exception:
                await message.answer(TEXTS['add_game_price_error'][lang])
                return
            add_state['price'] = price
            add_state['step'] = 'extra_info'
            kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text={'ru':'–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å','uk':'–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏','en':'Skip'}[lang], callback_data='skip_extra_info')]])
            await message.answer({'ru':'–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):','uk':'–í–≤–µ–¥—ñ—Ç—å –Ω–æ—Ç–∞—Ç–∫–∏ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ):','en':'Enter extra info (optional):'}[lang], reply_markup=kb)
            return
        elif step == 'extra_info':
            add_state['extra_info'] = text
            pool = await get_pg_pool()
            async with pool.acquire() as conn:
                await conn.execute('INSERT INTO games (date, time_start, time_end, place, price, extra_info) VALUES ($1, $2, $3, $4, $5, $6)',
                                   add_state['date'], add_state['time_start'], add_state['time_end'], add_state['place'], add_state['price'], add_state['extra_info'])
            add_game_states.pop(user_id, None)
            await message.answer(TEXTS['add_game_added'][lang], reply_markup=reply_menu(True, lang))
            return

    # --- Registration flow: handle step 'name' ---
    if user_id in user_states and user_states[user_id].get('step') == 'name':
        full_name = message.text.strip()
        user_states[user_id]['full_name'] = full_name
        user_states[user_id]['step'] = 'username'
        # Show two buttons: auto-insert and manual entry
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text={'ru':'–ê–≤—Ç–æ-–≤—Å—Ç–∞–≤–∫–∞','uk':'–ê–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∞','en':'Auto-insert'}[lang], callback_data='auto_username')],
            [InlineKeyboardButton(text={'ru':'–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é','uk':'–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É','en':'Enter manually'}[lang], callback_data='manual_username')]
        ])
        await message.answer(TEXTS['enter_username'][lang], reply_markup=kb)
        return

    # --- Registration flow: handle step 'username' (manual entry) ---
    if user_id in user_states and user_states[user_id].get('step') == 'username':
        username = message.text.strip()
        user_states[user_id]['username'] = username
        game_id = user_states[user_id].get('registering')
        full_name = user_states[user_id].get('full_name')
        if not game_id or not full_name:
            await message.answer({'ru':'–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.',
                                  'uk':'–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–∏–±—Ä–∞–Ω–æ –≥—Ä—É –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.',
                                  'en':'Error: no game selected for registration.'}[lang])
            return
        pool = await get_pg_pool()
        async with pool.acquire() as conn:
            await conn.execute('INSERT INTO registrations (game_id, user_id, username, full_name, paid) VALUES ($1, $2, $3, $4, $5)',
                               game_id, user_id, username, full_name, 0)
        await message.answer(TEXTS['registered'][lang], reply_markup=reply_menu(user_id in ADMIN_IDS, lang=lang))
        user_states[user_id].pop('registering', None)
        user_states[user_id].pop('full_name', None)
        user_states[user_id].pop('username', None)
        user_states[user_id].pop('step', None)
        return
@dp.callback_query(F.data == 'auto_username')
async def auto_username(callback: CallbackQuery):
    user_id = callback.from_user.id
    lang = await ensure_user_lang(user_id)
    tg_username = callback.from_user.username or ''
    user_states[user_id]['username'] = tg_username
    game_id = user_states[user_id].get('registering')
    full_name = user_states[user_id].get('full_name')
    if not game_id or not full_name:
        await callback.message.answer({'ru':'–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.',
                                      'uk':'–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–∏–±—Ä–∞–Ω–æ –≥—Ä—É –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.',
                                      'en':'Error: no game selected for registration.'}[lang])
        return
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        await conn.execute('INSERT INTO registrations (game_id, user_id, username, full_name, paid) VALUES ($1, $2, $3, $4, $5)',
                           game_id, user_id, tg_username, full_name, 0)
    await callback.message.answer(TEXTS['registered'][lang], reply_markup=reply_menu(user_id in ADMIN_IDS, lang=lang))
    user_states[user_id].pop('registering', None)
    user_states[user_id].pop('full_name', None)
    user_states[user_id].pop('username', None)
    user_states[user_id].pop('step', None)
    await callback.answer()


@dp.callback_query(F.data == 'manual_username')
async def manual_username(callback: CallbackQuery):
    user_id = callback.from_user.id
    lang = await ensure_user_lang(user_id)
    user_states[user_id]['step'] = 'username'
    await callback.message.answer({'ru':'–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à username –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è Telegram. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @. –ù–∞–ø—Ä–∏–º–µ—Ä: @nickname',
                                  'uk':'–°–∫–æ–ø—ñ—é–π—Ç–µ –≤–∞—à username –∑ –ø—Ä–æ—Ñ—ñ–ª—é Telegram. –í—ñ–¥–∫—Ä–∏–π—Ç–µ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å, –≤—ñ–Ω –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ @. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: @nickname',
                                  'en':'Copy your username from your Telegram profile. It starts with @. Example: @nickname'}[lang], reply_markup=None)

@dp.callback_query(F.data == 'delete_player_mode')
async def delete_player_mode(callback: CallbackQuery):
    lang = get_lang(callback.from_user.id)
    if callback.from_user.id not in ADMIN_IDS:
        await callback.message.answer(TEXTS['no_access'][lang])
        return
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        games = await conn.fetch('SELECT id, date, time_start, time_end, place FROM games')
        if not games:
            await callback.message.answer({'ru':'–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä.','uk':'–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —ñ–≥–æ—Ä.','en':'No available games.'}[lang])
            return
        for game in games:
            game_id, date, time_start, time_end, place = game['id'], game['date'], game['time_start'], game['time_end'], game['place']
            registrations = await conn.fetch('SELECT id, full_name, paid FROM registrations WHERE game_id = $1 ORDER BY id', game_id)
            main_list = registrations[:14]
            reserve_list = registrations[14:]
            reg_text = ""
            kb_rows = []
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            for idx, r in enumerate(main_list, 1):
                reg_text += f"{idx}. {r['full_name']} {'‚úÖ' if r['paid'] else ''}\n"
                kb_rows.append([InlineKeyboardButton(text={'ru':f"–£–¥–∞–ª–∏—Ç—å: {r['full_name']}", 'uk':f"–í–∏–¥–∞–ª–∏—Ç–∏: {r['full_name']}", 'en':f"Delete: {r['full_name']}"}[lang], callback_data=f"deladminreg_{r['id']}")])
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            if reserve_list:
                reg_text += "\n" + {'ru':'–†–µ–∑–µ—Ä–≤:','uk':'–†–µ–∑–µ—Ä–≤:','en':'Reserve:'}[lang] + "\n"
                for idx, r in enumerate(reserve_list, 1):
                    reg_text += f"R{idx}. {r['full_name']} {'‚úÖ' if r['paid'] else ''}\n"
                    kb_rows.append([InlineKeyboardButton(text={'ru':f"–£–¥–∞–ª–∏—Ç—å: {r['full_name']}", 'uk':f"–í–∏–¥–∞–ª–∏—Ç–∏: {r['full_name']}", 'en':f"Delete: {r['full_name']}"}[lang], callback_data=f"deladminreg_{r['id']}")])
            
            if not reg_text:
                reg_text = {'ru':'–ù–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö.','uk':'–ù–µ–º–∞—î –∑–∞–ø–∏—Å–∞–Ω–∏—Ö.','en':'No registrations.'}[lang]
            
            text = (f"üìÖ {date} ‚è∞ {time_start}-{time_end} üèüÔ∏è {place} \n{reg_text}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
            if kb_rows:
                kb = InlineKeyboardMarkup(inline_keyboard=kb_rows)
                await callback.message.answer(text, reply_markup=kb)
            else:
                await callback.message.answer(text)


@dp.callback_query(F.data.startswith('deladminreg_'))
async def deladminreg(callback: CallbackQuery):
    lang = get_lang(callback.from_user.id)
    reg_id = int(callback.data.split('_')[1])
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        await conn.execute('DELETE FROM registrations WHERE id = $1', reg_id)
    await callback.message.answer({'ru':'–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.','uk':'–ó–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ.','en':'Registration deleted.'}[lang])

# Helper: delete previous bot message for user
async def delete_last_bot_message(user_id, chat):
    msg_id = user_states.get(user_id, {}).get('last_bot_msg_id')
    if msg_id:
        try:
            await bot.delete_message(chat.id, msg_id)
        except Exception:
            pass
        user_states[user_id]['last_bot_msg_id'] = None

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    import logging
    import threading
    from aiohttp import web

    logging.basicConfig(level=logging.INFO)

    async def on_startup(dispatcher):
        await init_db()


    # For local development, comment out the HTTP server block below:
    # For production deployment (Render, Heroku, etc.), uncomment the HTTP server block:
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ (–µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è PORT)
    if os.getenv("PORT"):
        # –†–µ–∂–∏–º –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render/Heroku
        async def handle(request):
            return web.Response(text="Bot is running!")

        def run_web():
            try:
                app = web.Application()
                app.router.add_get("/", handle)
                port = int(os.environ.get("PORT", 10000))
                web.run_app(app, port=port, host="0.0.0.0")
            except Exception as e:
                print(f"Web server error: {e}")

        threading.Thread(target=run_web, daemon=True).start()
        print(f"Web server started on port {os.getenv('PORT', 10000)}")

    dp.startup.register(on_startup)
    dp.run_polling(bot)